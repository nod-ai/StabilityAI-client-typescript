/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { StabilityAIClientCore } from "../core.js";
import { appendForm, encodeJSON, encodeSimple } from "../lib/encodings.js";
import { readableStreamToArrayBuffer } from "../lib/files.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import { APIError } from "../models/errors/apierror.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { isBlobLike } from "../types/blobs.js";
import { Result } from "../types/fp.js";
import { isReadableStream } from "../types/streams.js";

export enum GenerateFromImageWithTextAcceptEnum {
  applicationJson = "application/json",
  imagePng = "image/png",
}

/**
 * Image-to-image with prompt
 *
 * @remarks
 * Produce an image from an existing image using a text prompt.
 * ### How to control strength of generation
 * To preserve only roughly 35% of the initial image, pass in either `init_image_mode=IMAGE_STRENGTH` and `image_strength=0.35` or `init_image_mode=STEP_SCHEDULE` and `step_schedule_start=0.65`.  Both of these are equivalent, however `init_image_mode=STEP_SCHEDULE` also lets you pass in `step_schedule_end`, which can provide an extra level of control for those who need it.  For more details, see the specific fields below.
 *
 * > NOTE: Only **Version 1** engines will work with this endpoint.
 */
export function version1ImageGenerateFromImageWithText(
  client: StabilityAIClientCore,
  request: operations.GenerateFromImageWithTextRequest,
  options?: RequestOptions & {
    acceptHeaderOverride?: GenerateFromImageWithTextAcceptEnum;
  },
): APIPromise<
  Result<
    operations.GenerateFromImageWithTextResponse,
    | errors.ErrorT
    | errors.ErrorT
    | APIError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: StabilityAIClientCore,
  request: operations.GenerateFromImageWithTextRequest,
  options?: RequestOptions & {
    acceptHeaderOverride?: GenerateFromImageWithTextAcceptEnum;
  },
): Promise<
  [
    Result<
      operations.GenerateFromImageWithTextResponse,
      | errors.ErrorT
      | errors.ErrorT
      | APIError
      | SDKValidationError
      | UnexpectedClientError
      | InvalidRequestError
      | RequestAbortedError
      | RequestTimeoutError
      | ConnectionError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) =>
      operations.GenerateFromImageWithTextRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = new FormData();

  if (isBlobLike(payload.ImageToImageRequestBody.init_image)) {
    appendForm(body, "init_image", payload.ImageToImageRequestBody.init_image);
  } else if (
    isReadableStream(payload.ImageToImageRequestBody.init_image.content)
  ) {
    const buffer = await readableStreamToArrayBuffer(
      payload.ImageToImageRequestBody.init_image.content,
    );
    const blob = new Blob([buffer], { type: "application/octet-stream" });
    appendForm(body, "init_image", blob);
  } else {
    appendForm(
      body,
      "init_image",
      new Blob([payload.ImageToImageRequestBody.init_image.content], {
        type: "application/octet-stream",
      }),
      payload.ImageToImageRequestBody.init_image.fileName,
    );
  }
  appendForm(
    body,
    "text_prompts",
    encodeJSON("text_prompts", payload.ImageToImageRequestBody.text_prompts, {
      explode: true,
    }),
  );
  if (payload.ImageToImageRequestBody.cfg_scale !== undefined) {
    appendForm(body, "cfg_scale", payload.ImageToImageRequestBody.cfg_scale);
  }
  if (payload.ImageToImageRequestBody.clip_guidance_preset !== undefined) {
    appendForm(
      body,
      "clip_guidance_preset",
      payload.ImageToImageRequestBody.clip_guidance_preset,
    );
  }
  if (payload.ImageToImageRequestBody.extras !== undefined) {
    appendForm(
      body,
      "extras",
      encodeJSON("extras", payload.ImageToImageRequestBody.extras, {
        explode: true,
      }),
    );
  }
  if (payload.ImageToImageRequestBody.image_strength !== undefined) {
    appendForm(
      body,
      "image_strength",
      payload.ImageToImageRequestBody.image_strength,
    );
  }
  if (payload.ImageToImageRequestBody.init_image_mode !== undefined) {
    appendForm(
      body,
      "init_image_mode",
      payload.ImageToImageRequestBody.init_image_mode,
    );
  }
  if (payload.ImageToImageRequestBody.sampler !== undefined) {
    appendForm(body, "sampler", payload.ImageToImageRequestBody.sampler);
  }
  if (payload.ImageToImageRequestBody.samples !== undefined) {
    appendForm(body, "samples", payload.ImageToImageRequestBody.samples);
  }
  if (payload.ImageToImageRequestBody.seed !== undefined) {
    appendForm(body, "seed", payload.ImageToImageRequestBody.seed);
  }
  if (payload.ImageToImageRequestBody.step_schedule_end !== undefined) {
    appendForm(
      body,
      "step_schedule_end",
      payload.ImageToImageRequestBody.step_schedule_end,
    );
  }
  if (payload.ImageToImageRequestBody.step_schedule_start !== undefined) {
    appendForm(
      body,
      "step_schedule_start",
      payload.ImageToImageRequestBody.step_schedule_start,
    );
  }
  if (payload.ImageToImageRequestBody.steps !== undefined) {
    appendForm(body, "steps", payload.ImageToImageRequestBody.steps);
  }
  if (payload.ImageToImageRequestBody.style_preset !== undefined) {
    appendForm(
      body,
      "style_preset",
      payload.ImageToImageRequestBody.style_preset,
    );
  }

  const pathParams = {
    engine_id: encodeSimple("engine_id", payload.engine_id, {
      explode: false,
      charEncoding: "percent",
    }),
  };

  const path = pathToFunc("/v1/generation/{engine_id}/image-to-image")(
    pathParams,
  );

  const headers = new Headers(compactMap({
    Accept: options?.acceptHeaderOverride
      || "application/json;q=1, image/png;q=0",
    "Organization": encodeSimple("Organization", payload.Organization, {
      explode: false,
      charEncoding: "none",
    }),
    "Stability-Client-ID": encodeSimple(
      "Stability-Client-ID",
      payload["Stability-Client-ID"],
      { explode: false, charEncoding: "none" },
    ),
    "Stability-Client-Version": encodeSimple(
      "Stability-Client-Version",
      payload["Stability-Client-Version"],
      { explode: false, charEncoding: "none" },
    ),
  }));

  const secConfig = await extractSecurity(client._options.stabilityApiKey);
  const securityInput = secConfig == null ? {} : { stabilityApiKey: secConfig };
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "generateFromImageWithText",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.stabilityApiKey,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "POST",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    body: body,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "401", "403", "404", "4XX", "500", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    operations.GenerateFromImageWithTextResponse,
    | errors.ErrorT
    | errors.ErrorT
    | APIError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    M.json(200, operations.GenerateFromImageWithTextResponse$inboundSchema, {
      hdrs: true,
      key: "Result",
    }),
    M.stream(200, operations.GenerateFromImageWithTextResponse$inboundSchema, {
      ctype: "image/png",
      hdrs: true,
      key: "Result",
    }),
    M.jsonErr([400, 401, 403, 404], errors.ErrorT$inboundSchema),
    M.jsonErr(500, errors.ErrorT$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
