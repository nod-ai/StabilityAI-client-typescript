/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GenerateFromTextRequest = {
  engineId: string;
  /**
   * Allows for requests to be scoped to an organization other than the user's default.  If not provided, the user's default organization will be used.
   */
  organization?: string | undefined;
  /**
   * Used to identify the source of requests, such as the client application or sub-organization. Optional, but recommended for organizational clarity.
   */
  stabilityClientID?: string | undefined;
  /**
   * Used to identify the version of the application or service making the requests. Optional, but recommended for organizational clarity.
   */
  stabilityClientVersion?: string | undefined;
  textToImageRequestBody: components.TextToImageRequestBody;
};

/**
 * An array of results from the generation request, where each image is a base64 encoded PNG.
 */
export type GenerateFromTextResponseBody = {
  artifacts?: Array<components.Image> | undefined;
};

export type GenerateFromTextResponseResult =
  | GenerateFromTextResponseBody
  | ReadableStream<Uint8Array>;

export type GenerateFromTextResponse = {
  headers: { [k: string]: Array<string> };
  result: GenerateFromTextResponseBody | ReadableStream<Uint8Array>;
};

/** @internal */
export const GenerateFromTextRequest$inboundSchema: z.ZodType<
  GenerateFromTextRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  engine_id: z.string(),
  Organization: z.string().optional(),
  "Stability-Client-ID": z.string().optional(),
  "Stability-Client-Version": z.string().optional(),
  TextToImageRequestBody: components.TextToImageRequestBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "engine_id": "engineId",
    "Organization": "organization",
    "Stability-Client-ID": "stabilityClientID",
    "Stability-Client-Version": "stabilityClientVersion",
    "TextToImageRequestBody": "textToImageRequestBody",
  });
});

/** @internal */
export type GenerateFromTextRequest$Outbound = {
  engine_id: string;
  Organization?: string | undefined;
  "Stability-Client-ID"?: string | undefined;
  "Stability-Client-Version"?: string | undefined;
  TextToImageRequestBody: components.TextToImageRequestBody$Outbound;
};

/** @internal */
export const GenerateFromTextRequest$outboundSchema: z.ZodType<
  GenerateFromTextRequest$Outbound,
  z.ZodTypeDef,
  GenerateFromTextRequest
> = z.object({
  engineId: z.string(),
  organization: z.string().optional(),
  stabilityClientID: z.string().optional(),
  stabilityClientVersion: z.string().optional(),
  textToImageRequestBody: components.TextToImageRequestBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    engineId: "engine_id",
    organization: "Organization",
    stabilityClientID: "Stability-Client-ID",
    stabilityClientVersion: "Stability-Client-Version",
    textToImageRequestBody: "TextToImageRequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateFromTextRequest$ {
  /** @deprecated use `GenerateFromTextRequest$inboundSchema` instead. */
  export const inboundSchema = GenerateFromTextRequest$inboundSchema;
  /** @deprecated use `GenerateFromTextRequest$outboundSchema` instead. */
  export const outboundSchema = GenerateFromTextRequest$outboundSchema;
  /** @deprecated use `GenerateFromTextRequest$Outbound` instead. */
  export type Outbound = GenerateFromTextRequest$Outbound;
}

export function generateFromTextRequestToJSON(
  generateFromTextRequest: GenerateFromTextRequest,
): string {
  return JSON.stringify(
    GenerateFromTextRequest$outboundSchema.parse(generateFromTextRequest),
  );
}

export function generateFromTextRequestFromJSON(
  jsonString: string,
): SafeParseResult<GenerateFromTextRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GenerateFromTextRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GenerateFromTextRequest' from JSON`,
  );
}

/** @internal */
export const GenerateFromTextResponseBody$inboundSchema: z.ZodType<
  GenerateFromTextResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  artifacts: z.array(components.Image$inboundSchema).optional(),
});

/** @internal */
export type GenerateFromTextResponseBody$Outbound = {
  artifacts?: Array<components.Image$Outbound> | undefined;
};

/** @internal */
export const GenerateFromTextResponseBody$outboundSchema: z.ZodType<
  GenerateFromTextResponseBody$Outbound,
  z.ZodTypeDef,
  GenerateFromTextResponseBody
> = z.object({
  artifacts: z.array(components.Image$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateFromTextResponseBody$ {
  /** @deprecated use `GenerateFromTextResponseBody$inboundSchema` instead. */
  export const inboundSchema = GenerateFromTextResponseBody$inboundSchema;
  /** @deprecated use `GenerateFromTextResponseBody$outboundSchema` instead. */
  export const outboundSchema = GenerateFromTextResponseBody$outboundSchema;
  /** @deprecated use `GenerateFromTextResponseBody$Outbound` instead. */
  export type Outbound = GenerateFromTextResponseBody$Outbound;
}

export function generateFromTextResponseBodyToJSON(
  generateFromTextResponseBody: GenerateFromTextResponseBody,
): string {
  return JSON.stringify(
    GenerateFromTextResponseBody$outboundSchema.parse(
      generateFromTextResponseBody,
    ),
  );
}

export function generateFromTextResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GenerateFromTextResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GenerateFromTextResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GenerateFromTextResponseBody' from JSON`,
  );
}

/** @internal */
export const GenerateFromTextResponseResult$inboundSchema: z.ZodType<
  GenerateFromTextResponseResult,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GenerateFromTextResponseBody$inboundSchema),
  z.instanceof(ReadableStream<Uint8Array>),
]);

/** @internal */
export type GenerateFromTextResponseResult$Outbound =
  | GenerateFromTextResponseBody$Outbound
  | ReadableStream<Uint8Array>;

/** @internal */
export const GenerateFromTextResponseResult$outboundSchema: z.ZodType<
  GenerateFromTextResponseResult$Outbound,
  z.ZodTypeDef,
  GenerateFromTextResponseResult
> = z.union([
  z.lazy(() => GenerateFromTextResponseBody$outboundSchema),
  z.instanceof(ReadableStream<Uint8Array>),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateFromTextResponseResult$ {
  /** @deprecated use `GenerateFromTextResponseResult$inboundSchema` instead. */
  export const inboundSchema = GenerateFromTextResponseResult$inboundSchema;
  /** @deprecated use `GenerateFromTextResponseResult$outboundSchema` instead. */
  export const outboundSchema = GenerateFromTextResponseResult$outboundSchema;
  /** @deprecated use `GenerateFromTextResponseResult$Outbound` instead. */
  export type Outbound = GenerateFromTextResponseResult$Outbound;
}

export function generateFromTextResponseResultToJSON(
  generateFromTextResponseResult: GenerateFromTextResponseResult,
): string {
  return JSON.stringify(
    GenerateFromTextResponseResult$outboundSchema.parse(
      generateFromTextResponseResult,
    ),
  );
}

export function generateFromTextResponseResultFromJSON(
  jsonString: string,
): SafeParseResult<GenerateFromTextResponseResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GenerateFromTextResponseResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GenerateFromTextResponseResult' from JSON`,
  );
}

/** @internal */
export const GenerateFromTextResponse$inboundSchema: z.ZodType<
  GenerateFromTextResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.union([
    z.lazy(() => GenerateFromTextResponseBody$inboundSchema),
    z.instanceof(ReadableStream<Uint8Array>),
  ]),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GenerateFromTextResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: GenerateFromTextResponseBody$Outbound | ReadableStream<Uint8Array>;
};

/** @internal */
export const GenerateFromTextResponse$outboundSchema: z.ZodType<
  GenerateFromTextResponse$Outbound,
  z.ZodTypeDef,
  GenerateFromTextResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.union([
    z.lazy(() => GenerateFromTextResponseBody$outboundSchema),
    z.instanceof(ReadableStream<Uint8Array>),
  ]),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateFromTextResponse$ {
  /** @deprecated use `GenerateFromTextResponse$inboundSchema` instead. */
  export const inboundSchema = GenerateFromTextResponse$inboundSchema;
  /** @deprecated use `GenerateFromTextResponse$outboundSchema` instead. */
  export const outboundSchema = GenerateFromTextResponse$outboundSchema;
  /** @deprecated use `GenerateFromTextResponse$Outbound` instead. */
  export type Outbound = GenerateFromTextResponse$Outbound;
}

export function generateFromTextResponseToJSON(
  generateFromTextResponse: GenerateFromTextResponse,
): string {
  return JSON.stringify(
    GenerateFromTextResponse$outboundSchema.parse(generateFromTextResponse),
  );
}

export function generateFromTextResponseFromJSON(
  jsonString: string,
): SafeParseResult<GenerateFromTextResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GenerateFromTextResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GenerateFromTextResponse' from JSON`,
  );
}
