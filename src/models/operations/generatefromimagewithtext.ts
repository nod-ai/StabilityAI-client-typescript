/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GenerateFromImageWithTextRequest = {
  engineId: string;
  /**
   * Allows for requests to be scoped to an organization other than the user's default.  If not provided, the user's default organization will be used.
   */
  organization?: string | undefined;
  /**
   * Used to identify the source of requests, such as the client application or sub-organization. Optional, but recommended for organizational clarity.
   */
  stabilityClientID?: string | undefined;
  /**
   * Used to identify the version of the application or service making the requests. Optional, but recommended for organizational clarity.
   */
  stabilityClientVersion?: string | undefined;
  imageToImageRequestBody: components.ImageToImageRequestBody;
};

/**
 * An array of results from the generation request, where each image is a base64 encoded PNG.
 */
export type GenerateFromImageWithTextResponseBody = {
  artifacts?: Array<components.Image> | undefined;
};

export type GenerateFromImageWithTextResponseResult =
  | GenerateFromImageWithTextResponseBody
  | ReadableStream<Uint8Array>;

export type GenerateFromImageWithTextResponse = {
  headers: { [k: string]: Array<string> };
  result: GenerateFromImageWithTextResponseBody | ReadableStream<Uint8Array>;
};

/** @internal */
export const GenerateFromImageWithTextRequest$inboundSchema: z.ZodType<
  GenerateFromImageWithTextRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  engine_id: z.string(),
  Organization: z.string().optional(),
  "Stability-Client-ID": z.string().optional(),
  "Stability-Client-Version": z.string().optional(),
  ImageToImageRequestBody: components.ImageToImageRequestBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "engine_id": "engineId",
    "Organization": "organization",
    "Stability-Client-ID": "stabilityClientID",
    "Stability-Client-Version": "stabilityClientVersion",
    "ImageToImageRequestBody": "imageToImageRequestBody",
  });
});

/** @internal */
export type GenerateFromImageWithTextRequest$Outbound = {
  engine_id: string;
  Organization?: string | undefined;
  "Stability-Client-ID"?: string | undefined;
  "Stability-Client-Version"?: string | undefined;
  ImageToImageRequestBody: components.ImageToImageRequestBody$Outbound;
};

/** @internal */
export const GenerateFromImageWithTextRequest$outboundSchema: z.ZodType<
  GenerateFromImageWithTextRequest$Outbound,
  z.ZodTypeDef,
  GenerateFromImageWithTextRequest
> = z.object({
  engineId: z.string(),
  organization: z.string().optional(),
  stabilityClientID: z.string().optional(),
  stabilityClientVersion: z.string().optional(),
  imageToImageRequestBody: components.ImageToImageRequestBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    engineId: "engine_id",
    organization: "Organization",
    stabilityClientID: "Stability-Client-ID",
    stabilityClientVersion: "Stability-Client-Version",
    imageToImageRequestBody: "ImageToImageRequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateFromImageWithTextRequest$ {
  /** @deprecated use `GenerateFromImageWithTextRequest$inboundSchema` instead. */
  export const inboundSchema = GenerateFromImageWithTextRequest$inboundSchema;
  /** @deprecated use `GenerateFromImageWithTextRequest$outboundSchema` instead. */
  export const outboundSchema = GenerateFromImageWithTextRequest$outboundSchema;
  /** @deprecated use `GenerateFromImageWithTextRequest$Outbound` instead. */
  export type Outbound = GenerateFromImageWithTextRequest$Outbound;
}

export function generateFromImageWithTextRequestToJSON(
  generateFromImageWithTextRequest: GenerateFromImageWithTextRequest,
): string {
  return JSON.stringify(
    GenerateFromImageWithTextRequest$outboundSchema.parse(
      generateFromImageWithTextRequest,
    ),
  );
}

export function generateFromImageWithTextRequestFromJSON(
  jsonString: string,
): SafeParseResult<GenerateFromImageWithTextRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GenerateFromImageWithTextRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GenerateFromImageWithTextRequest' from JSON`,
  );
}

/** @internal */
export const GenerateFromImageWithTextResponseBody$inboundSchema: z.ZodType<
  GenerateFromImageWithTextResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  artifacts: z.array(components.Image$inboundSchema).optional(),
});

/** @internal */
export type GenerateFromImageWithTextResponseBody$Outbound = {
  artifacts?: Array<components.Image$Outbound> | undefined;
};

/** @internal */
export const GenerateFromImageWithTextResponseBody$outboundSchema: z.ZodType<
  GenerateFromImageWithTextResponseBody$Outbound,
  z.ZodTypeDef,
  GenerateFromImageWithTextResponseBody
> = z.object({
  artifacts: z.array(components.Image$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateFromImageWithTextResponseBody$ {
  /** @deprecated use `GenerateFromImageWithTextResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GenerateFromImageWithTextResponseBody$inboundSchema;
  /** @deprecated use `GenerateFromImageWithTextResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GenerateFromImageWithTextResponseBody$outboundSchema;
  /** @deprecated use `GenerateFromImageWithTextResponseBody$Outbound` instead. */
  export type Outbound = GenerateFromImageWithTextResponseBody$Outbound;
}

export function generateFromImageWithTextResponseBodyToJSON(
  generateFromImageWithTextResponseBody: GenerateFromImageWithTextResponseBody,
): string {
  return JSON.stringify(
    GenerateFromImageWithTextResponseBody$outboundSchema.parse(
      generateFromImageWithTextResponseBody,
    ),
  );
}

export function generateFromImageWithTextResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GenerateFromImageWithTextResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GenerateFromImageWithTextResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GenerateFromImageWithTextResponseBody' from JSON`,
  );
}

/** @internal */
export const GenerateFromImageWithTextResponseResult$inboundSchema: z.ZodType<
  GenerateFromImageWithTextResponseResult,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GenerateFromImageWithTextResponseBody$inboundSchema),
  z.instanceof(ReadableStream<Uint8Array>),
]);

/** @internal */
export type GenerateFromImageWithTextResponseResult$Outbound =
  | GenerateFromImageWithTextResponseBody$Outbound
  | ReadableStream<Uint8Array>;

/** @internal */
export const GenerateFromImageWithTextResponseResult$outboundSchema: z.ZodType<
  GenerateFromImageWithTextResponseResult$Outbound,
  z.ZodTypeDef,
  GenerateFromImageWithTextResponseResult
> = z.union([
  z.lazy(() => GenerateFromImageWithTextResponseBody$outboundSchema),
  z.instanceof(ReadableStream<Uint8Array>),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateFromImageWithTextResponseResult$ {
  /** @deprecated use `GenerateFromImageWithTextResponseResult$inboundSchema` instead. */
  export const inboundSchema =
    GenerateFromImageWithTextResponseResult$inboundSchema;
  /** @deprecated use `GenerateFromImageWithTextResponseResult$outboundSchema` instead. */
  export const outboundSchema =
    GenerateFromImageWithTextResponseResult$outboundSchema;
  /** @deprecated use `GenerateFromImageWithTextResponseResult$Outbound` instead. */
  export type Outbound = GenerateFromImageWithTextResponseResult$Outbound;
}

export function generateFromImageWithTextResponseResultToJSON(
  generateFromImageWithTextResponseResult:
    GenerateFromImageWithTextResponseResult,
): string {
  return JSON.stringify(
    GenerateFromImageWithTextResponseResult$outboundSchema.parse(
      generateFromImageWithTextResponseResult,
    ),
  );
}

export function generateFromImageWithTextResponseResultFromJSON(
  jsonString: string,
): SafeParseResult<
  GenerateFromImageWithTextResponseResult,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GenerateFromImageWithTextResponseResult$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GenerateFromImageWithTextResponseResult' from JSON`,
  );
}

/** @internal */
export const GenerateFromImageWithTextResponse$inboundSchema: z.ZodType<
  GenerateFromImageWithTextResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.union([
    z.lazy(() => GenerateFromImageWithTextResponseBody$inboundSchema),
    z.instanceof(ReadableStream<Uint8Array>),
  ]),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GenerateFromImageWithTextResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result:
    | GenerateFromImageWithTextResponseBody$Outbound
    | ReadableStream<Uint8Array>;
};

/** @internal */
export const GenerateFromImageWithTextResponse$outboundSchema: z.ZodType<
  GenerateFromImageWithTextResponse$Outbound,
  z.ZodTypeDef,
  GenerateFromImageWithTextResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.union([
    z.lazy(() => GenerateFromImageWithTextResponseBody$outboundSchema),
    z.instanceof(ReadableStream<Uint8Array>),
  ]),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateFromImageWithTextResponse$ {
  /** @deprecated use `GenerateFromImageWithTextResponse$inboundSchema` instead. */
  export const inboundSchema = GenerateFromImageWithTextResponse$inboundSchema;
  /** @deprecated use `GenerateFromImageWithTextResponse$outboundSchema` instead. */
  export const outboundSchema =
    GenerateFromImageWithTextResponse$outboundSchema;
  /** @deprecated use `GenerateFromImageWithTextResponse$Outbound` instead. */
  export type Outbound = GenerateFromImageWithTextResponse$Outbound;
}

export function generateFromImageWithTextResponseToJSON(
  generateFromImageWithTextResponse: GenerateFromImageWithTextResponse,
): string {
  return JSON.stringify(
    GenerateFromImageWithTextResponse$outboundSchema.parse(
      generateFromImageWithTextResponse,
    ),
  );
}

export function generateFromImageWithTextResponseFromJSON(
  jsonString: string,
): SafeParseResult<GenerateFromImageWithTextResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GenerateFromImageWithTextResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GenerateFromImageWithTextResponse' from JSON`,
  );
}
