/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GenerateFromImageWithTextAndMaskRequest = {
  engineId: string;
  /**
   * Allows for requests to be scoped to an organization other than the user's default.  If not provided, the user's default organization will be used.
   */
  organization?: string | undefined;
  /**
   * Used to identify the source of requests, such as the client application or sub-organization. Optional, but recommended for organizational clarity.
   */
  stabilityClientID?: string | undefined;
  /**
   * Used to identify the version of the application or service making the requests. Optional, but recommended for organizational clarity.
   */
  stabilityClientVersion?: string | undefined;
  maskingRequestBody: components.MaskingRequestBody;
};

/**
 * An array of results from the generation request, where each image is a base64 encoded PNG.
 */
export type GenerateFromImageWithTextAndMaskResponseBody = {
  artifacts?: Array<components.Image> | undefined;
};

export type GenerateFromImageWithTextAndMaskResponseResult =
  | GenerateFromImageWithTextAndMaskResponseBody
  | ReadableStream<Uint8Array>;

export type GenerateFromImageWithTextAndMaskResponse = {
  headers: { [k: string]: Array<string> };
  result:
    | GenerateFromImageWithTextAndMaskResponseBody
    | ReadableStream<Uint8Array>;
};

/** @internal */
export const GenerateFromImageWithTextAndMaskRequest$inboundSchema: z.ZodType<
  GenerateFromImageWithTextAndMaskRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  engine_id: z.string(),
  Organization: z.string().optional(),
  "Stability-Client-ID": z.string().optional(),
  "Stability-Client-Version": z.string().optional(),
  MaskingRequestBody: components.MaskingRequestBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "engine_id": "engineId",
    "Organization": "organization",
    "Stability-Client-ID": "stabilityClientID",
    "Stability-Client-Version": "stabilityClientVersion",
    "MaskingRequestBody": "maskingRequestBody",
  });
});

/** @internal */
export type GenerateFromImageWithTextAndMaskRequest$Outbound = {
  engine_id: string;
  Organization?: string | undefined;
  "Stability-Client-ID"?: string | undefined;
  "Stability-Client-Version"?: string | undefined;
  MaskingRequestBody: components.MaskingRequestBody$Outbound;
};

/** @internal */
export const GenerateFromImageWithTextAndMaskRequest$outboundSchema: z.ZodType<
  GenerateFromImageWithTextAndMaskRequest$Outbound,
  z.ZodTypeDef,
  GenerateFromImageWithTextAndMaskRequest
> = z.object({
  engineId: z.string(),
  organization: z.string().optional(),
  stabilityClientID: z.string().optional(),
  stabilityClientVersion: z.string().optional(),
  maskingRequestBody: components.MaskingRequestBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    engineId: "engine_id",
    organization: "Organization",
    stabilityClientID: "Stability-Client-ID",
    stabilityClientVersion: "Stability-Client-Version",
    maskingRequestBody: "MaskingRequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateFromImageWithTextAndMaskRequest$ {
  /** @deprecated use `GenerateFromImageWithTextAndMaskRequest$inboundSchema` instead. */
  export const inboundSchema =
    GenerateFromImageWithTextAndMaskRequest$inboundSchema;
  /** @deprecated use `GenerateFromImageWithTextAndMaskRequest$outboundSchema` instead. */
  export const outboundSchema =
    GenerateFromImageWithTextAndMaskRequest$outboundSchema;
  /** @deprecated use `GenerateFromImageWithTextAndMaskRequest$Outbound` instead. */
  export type Outbound = GenerateFromImageWithTextAndMaskRequest$Outbound;
}

export function generateFromImageWithTextAndMaskRequestToJSON(
  generateFromImageWithTextAndMaskRequest:
    GenerateFromImageWithTextAndMaskRequest,
): string {
  return JSON.stringify(
    GenerateFromImageWithTextAndMaskRequest$outboundSchema.parse(
      generateFromImageWithTextAndMaskRequest,
    ),
  );
}

export function generateFromImageWithTextAndMaskRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GenerateFromImageWithTextAndMaskRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GenerateFromImageWithTextAndMaskRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GenerateFromImageWithTextAndMaskRequest' from JSON`,
  );
}

/** @internal */
export const GenerateFromImageWithTextAndMaskResponseBody$inboundSchema:
  z.ZodType<
    GenerateFromImageWithTextAndMaskResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    artifacts: z.array(components.Image$inboundSchema).optional(),
  });

/** @internal */
export type GenerateFromImageWithTextAndMaskResponseBody$Outbound = {
  artifacts?: Array<components.Image$Outbound> | undefined;
};

/** @internal */
export const GenerateFromImageWithTextAndMaskResponseBody$outboundSchema:
  z.ZodType<
    GenerateFromImageWithTextAndMaskResponseBody$Outbound,
    z.ZodTypeDef,
    GenerateFromImageWithTextAndMaskResponseBody
  > = z.object({
    artifacts: z.array(components.Image$outboundSchema).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateFromImageWithTextAndMaskResponseBody$ {
  /** @deprecated use `GenerateFromImageWithTextAndMaskResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GenerateFromImageWithTextAndMaskResponseBody$inboundSchema;
  /** @deprecated use `GenerateFromImageWithTextAndMaskResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GenerateFromImageWithTextAndMaskResponseBody$outboundSchema;
  /** @deprecated use `GenerateFromImageWithTextAndMaskResponseBody$Outbound` instead. */
  export type Outbound = GenerateFromImageWithTextAndMaskResponseBody$Outbound;
}

export function generateFromImageWithTextAndMaskResponseBodyToJSON(
  generateFromImageWithTextAndMaskResponseBody:
    GenerateFromImageWithTextAndMaskResponseBody,
): string {
  return JSON.stringify(
    GenerateFromImageWithTextAndMaskResponseBody$outboundSchema.parse(
      generateFromImageWithTextAndMaskResponseBody,
    ),
  );
}

export function generateFromImageWithTextAndMaskResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GenerateFromImageWithTextAndMaskResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GenerateFromImageWithTextAndMaskResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GenerateFromImageWithTextAndMaskResponseBody' from JSON`,
  );
}

/** @internal */
export const GenerateFromImageWithTextAndMaskResponseResult$inboundSchema:
  z.ZodType<
    GenerateFromImageWithTextAndMaskResponseResult,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => GenerateFromImageWithTextAndMaskResponseBody$inboundSchema),
    z.instanceof(ReadableStream<Uint8Array>),
  ]);

/** @internal */
export type GenerateFromImageWithTextAndMaskResponseResult$Outbound =
  | GenerateFromImageWithTextAndMaskResponseBody$Outbound
  | ReadableStream<Uint8Array>;

/** @internal */
export const GenerateFromImageWithTextAndMaskResponseResult$outboundSchema:
  z.ZodType<
    GenerateFromImageWithTextAndMaskResponseResult$Outbound,
    z.ZodTypeDef,
    GenerateFromImageWithTextAndMaskResponseResult
  > = z.union([
    z.lazy(() => GenerateFromImageWithTextAndMaskResponseBody$outboundSchema),
    z.instanceof(ReadableStream<Uint8Array>),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateFromImageWithTextAndMaskResponseResult$ {
  /** @deprecated use `GenerateFromImageWithTextAndMaskResponseResult$inboundSchema` instead. */
  export const inboundSchema =
    GenerateFromImageWithTextAndMaskResponseResult$inboundSchema;
  /** @deprecated use `GenerateFromImageWithTextAndMaskResponseResult$outboundSchema` instead. */
  export const outboundSchema =
    GenerateFromImageWithTextAndMaskResponseResult$outboundSchema;
  /** @deprecated use `GenerateFromImageWithTextAndMaskResponseResult$Outbound` instead. */
  export type Outbound =
    GenerateFromImageWithTextAndMaskResponseResult$Outbound;
}

export function generateFromImageWithTextAndMaskResponseResultToJSON(
  generateFromImageWithTextAndMaskResponseResult:
    GenerateFromImageWithTextAndMaskResponseResult,
): string {
  return JSON.stringify(
    GenerateFromImageWithTextAndMaskResponseResult$outboundSchema.parse(
      generateFromImageWithTextAndMaskResponseResult,
    ),
  );
}

export function generateFromImageWithTextAndMaskResponseResultFromJSON(
  jsonString: string,
): SafeParseResult<
  GenerateFromImageWithTextAndMaskResponseResult,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GenerateFromImageWithTextAndMaskResponseResult$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GenerateFromImageWithTextAndMaskResponseResult' from JSON`,
  );
}

/** @internal */
export const GenerateFromImageWithTextAndMaskResponse$inboundSchema: z.ZodType<
  GenerateFromImageWithTextAndMaskResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.union([
    z.lazy(() => GenerateFromImageWithTextAndMaskResponseBody$inboundSchema),
    z.instanceof(ReadableStream<Uint8Array>),
  ]),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GenerateFromImageWithTextAndMaskResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result:
    | GenerateFromImageWithTextAndMaskResponseBody$Outbound
    | ReadableStream<Uint8Array>;
};

/** @internal */
export const GenerateFromImageWithTextAndMaskResponse$outboundSchema: z.ZodType<
  GenerateFromImageWithTextAndMaskResponse$Outbound,
  z.ZodTypeDef,
  GenerateFromImageWithTextAndMaskResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.union([
    z.lazy(() => GenerateFromImageWithTextAndMaskResponseBody$outboundSchema),
    z.instanceof(ReadableStream<Uint8Array>),
  ]),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateFromImageWithTextAndMaskResponse$ {
  /** @deprecated use `GenerateFromImageWithTextAndMaskResponse$inboundSchema` instead. */
  export const inboundSchema =
    GenerateFromImageWithTextAndMaskResponse$inboundSchema;
  /** @deprecated use `GenerateFromImageWithTextAndMaskResponse$outboundSchema` instead. */
  export const outboundSchema =
    GenerateFromImageWithTextAndMaskResponse$outboundSchema;
  /** @deprecated use `GenerateFromImageWithTextAndMaskResponse$Outbound` instead. */
  export type Outbound = GenerateFromImageWithTextAndMaskResponse$Outbound;
}

export function generateFromImageWithTextAndMaskResponseToJSON(
  generateFromImageWithTextAndMaskResponse:
    GenerateFromImageWithTextAndMaskResponse,
): string {
  return JSON.stringify(
    GenerateFromImageWithTextAndMaskResponse$outboundSchema.parse(
      generateFromImageWithTextAndMaskResponse,
    ),
  );
}

export function generateFromImageWithTextAndMaskResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GenerateFromImageWithTextAndMaskResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GenerateFromImageWithTextAndMaskResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GenerateFromImageWithTextAndMaskResponse' from JSON`,
  );
}
