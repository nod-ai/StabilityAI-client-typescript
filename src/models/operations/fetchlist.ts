/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FetchListRequest = {
  /**
   * Allows for requests to be scoped to an organization other than the user's default.  If not provided, the user's default organization will be used.
   */
  organization?: string | undefined;
  /**
   * Used to identify the source of requests, such as the client application or sub-organization. Optional, but recommended for organizational clarity.
   */
  stabilityClientID?: string | undefined;
  /**
   * Used to identify the version of the application or service making the requests. Optional, but recommended for organizational clarity.
   */
  stabilityClientVersion?: string | undefined;
};

/** @internal */
export const FetchListRequest$inboundSchema: z.ZodType<
  FetchListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  Organization: z.string().optional(),
  "Stability-Client-ID": z.string().optional(),
  "Stability-Client-Version": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Organization": "organization",
    "Stability-Client-ID": "stabilityClientID",
    "Stability-Client-Version": "stabilityClientVersion",
  });
});

/** @internal */
export type FetchListRequest$Outbound = {
  Organization?: string | undefined;
  "Stability-Client-ID"?: string | undefined;
  "Stability-Client-Version"?: string | undefined;
};

/** @internal */
export const FetchListRequest$outboundSchema: z.ZodType<
  FetchListRequest$Outbound,
  z.ZodTypeDef,
  FetchListRequest
> = z.object({
  organization: z.string().optional(),
  stabilityClientID: z.string().optional(),
  stabilityClientVersion: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    organization: "Organization",
    stabilityClientID: "Stability-Client-ID",
    stabilityClientVersion: "Stability-Client-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FetchListRequest$ {
  /** @deprecated use `FetchListRequest$inboundSchema` instead. */
  export const inboundSchema = FetchListRequest$inboundSchema;
  /** @deprecated use `FetchListRequest$outboundSchema` instead. */
  export const outboundSchema = FetchListRequest$outboundSchema;
  /** @deprecated use `FetchListRequest$Outbound` instead. */
  export type Outbound = FetchListRequest$Outbound;
}

export function fetchListRequestToJSON(
  fetchListRequest: FetchListRequest,
): string {
  return JSON.stringify(
    FetchListRequest$outboundSchema.parse(fetchListRequest),
  );
}

export function fetchListRequestFromJSON(
  jsonString: string,
): SafeParseResult<FetchListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FetchListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FetchListRequest' from JSON`,
  );
}
