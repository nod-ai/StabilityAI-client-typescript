/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of content this engine produces
 */
export const Type = {
  Audio: "AUDIO",
  Classification: "CLASSIFICATION",
  Picture: "PICTURE",
  Storage: "STORAGE",
  Text: "TEXT",
  Video: "VIDEO",
} as const;
/**
 * The type of content this engine produces
 */
export type Type = ClosedEnum<typeof Type>;

export type Engine = {
  description: string;
  /**
   * Unique identifier for the engine
   */
  id: string;
  /**
   * Name of the engine
   */
  name: string;
  /**
   * The type of content this engine produces
   */
  type: Type;
};

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const Engine$inboundSchema: z.ZodType<Engine, z.ZodTypeDef, unknown> = z
  .object({
    description: z.string(),
    id: z.string(),
    name: z.string(),
    type: Type$inboundSchema,
  });

/** @internal */
export type Engine$Outbound = {
  description: string;
  id: string;
  name: string;
  type: string;
};

/** @internal */
export const Engine$outboundSchema: z.ZodType<
  Engine$Outbound,
  z.ZodTypeDef,
  Engine
> = z.object({
  description: z.string(),
  id: z.string(),
  name: z.string(),
  type: Type$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Engine$ {
  /** @deprecated use `Engine$inboundSchema` instead. */
  export const inboundSchema = Engine$inboundSchema;
  /** @deprecated use `Engine$outboundSchema` instead. */
  export const outboundSchema = Engine$outboundSchema;
  /** @deprecated use `Engine$Outbound` instead. */
  export type Outbound = Engine$Outbound;
}

export function engineToJSON(engine: Engine): string {
  return JSON.stringify(Engine$outboundSchema.parse(engine));
}

export function engineFromJSON(
  jsonString: string,
): SafeParseResult<Engine, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Engine$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Engine' from JSON`,
  );
}
