/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OrganizationMembership = {
  id: string;
  isDefault: boolean;
  name: string;
  role: string;
};

/** @internal */
export const OrganizationMembership$inboundSchema: z.ZodType<
  OrganizationMembership,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  is_default: z.boolean(),
  name: z.string(),
  role: z.string(),
}).transform((v) => {
  return remap$(v, {
    "is_default": "isDefault",
  });
});

/** @internal */
export type OrganizationMembership$Outbound = {
  id: string;
  is_default: boolean;
  name: string;
  role: string;
};

/** @internal */
export const OrganizationMembership$outboundSchema: z.ZodType<
  OrganizationMembership$Outbound,
  z.ZodTypeDef,
  OrganizationMembership
> = z.object({
  id: z.string(),
  isDefault: z.boolean(),
  name: z.string(),
  role: z.string(),
}).transform((v) => {
  return remap$(v, {
    isDefault: "is_default",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationMembership$ {
  /** @deprecated use `OrganizationMembership$inboundSchema` instead. */
  export const inboundSchema = OrganizationMembership$inboundSchema;
  /** @deprecated use `OrganizationMembership$outboundSchema` instead. */
  export const outboundSchema = OrganizationMembership$outboundSchema;
  /** @deprecated use `OrganizationMembership$Outbound` instead. */
  export type Outbound = OrganizationMembership$Outbound;
}

export function organizationMembershipToJSON(
  organizationMembership: OrganizationMembership,
): string {
  return JSON.stringify(
    OrganizationMembership$outboundSchema.parse(organizationMembership),
  );
}

export function organizationMembershipFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationMembership, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationMembership$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationMembership' from JSON`,
  );
}
