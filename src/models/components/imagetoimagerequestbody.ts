/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { blobLikeSchema } from "../../types/blobs.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ClipGuidancePreset,
  ClipGuidancePreset$inboundSchema,
  ClipGuidancePreset$outboundSchema,
} from "./clipguidancepreset.js";
import {
  Extras,
  Extras$inboundSchema,
  Extras$Outbound,
  Extras$outboundSchema,
} from "./extras.js";
import {
  InitImage,
  InitImage$inboundSchema,
  InitImage$Outbound,
  InitImage$outboundSchema,
} from "./initimage.js";
import {
  InitImageMode,
  InitImageMode$inboundSchema,
  InitImageMode$outboundSchema,
} from "./initimagemode.js";
import {
  Sampler,
  Sampler$inboundSchema,
  Sampler$outboundSchema,
} from "./sampler.js";
import {
  StylePreset,
  StylePreset$inboundSchema,
  StylePreset$outboundSchema,
} from "./stylepreset.js";
import {
  TextPrompt,
  TextPrompt$inboundSchema,
  TextPrompt$Outbound,
  TextPrompt$outboundSchema,
} from "./textprompt.js";

export type ImageToImageRequestBody = {
  /**
   * Image used to initialize the diffusion process, in lieu of random noise.
   */
  initImage: InitImage | Blob;
  /**
   * An array of text prompts to use for generation.
   *
   * @remarks
   *
   * Due to how arrays are represented in `multipart/form-data` requests, prompts must adhere to the format `text_prompts[index][text|weight]`,
   * where `index` is some integer used to tie the text and weight together.  While `index` does not have to be sequential, duplicate entries
   * will override previous entries, so it is recommended to use sequential indices.
   *
   * Given a text prompt with the text `A lighthouse on a cliff` and a weight of `0.5`, it would be represented as:
   * ```
   * text_prompts[0][text]: "A lighthouse on a cliff"
   * text_prompts[0][weight]: 0.5
   * ```
   *
   * To add another prompt to that request simply provide the values under a new `index`:
   *
   * ```
   * text_prompts[0][text]: "A lighthouse on a cliff"
   * text_prompts[0][weight]: 0.5
   * text_prompts[1][text]: "land, ground, dirt, grass"
   * text_prompts[1][weight]: -0.9
   * ```
   */
  textPrompts: Array<TextPrompt>;
  /**
   * How strictly the diffusion process adheres to the prompt text (higher values keep your image closer to your prompt)
   */
  cfgScale?: number | undefined;
  clipGuidancePreset?: ClipGuidancePreset | undefined;
  /**
   * Extra parameters passed to the engine.
   *
   * @remarks
   * These parameters are used for in-development or experimental features and may change
   * without warning, so please use with caution.
   */
  extras?: Extras | undefined;
  /**
   * How much influence the `init_image` has on the diffusion process. Values close to `1` will yield images very similar to the `init_image` while values close to `0` will yield images wildly different than the `init_image`. The behavior of this is meant to mirror DreamStudio's "Image Strength" slider.  <br/> <br/> This parameter is just an alternate way to set `step_schedule_start`, which is done via the calculation `1 - image_strength`. For example, passing in an Image Strength of 35% (`0.35`) would result in a `step_schedule_start` of `0.65`.
   *
   * @remarks
   */
  imageStrength?: number | undefined;
  /**
   * Whether to use `image_strength` or `step_schedule_*` to control how much influence the `init_image` has on the result.
   */
  initImageMode?: InitImageMode | undefined;
  /**
   * Which sampler to use for the diffusion process. If this value is omitted we'll automatically select an appropriate sampler for you.
   */
  sampler?: Sampler | undefined;
  /**
   * Number of images to generate
   */
  samples?: number | undefined;
  /**
   * Random noise seed (omit this option or use `0` for a random seed)
   */
  seed?: number | undefined;
  /**
   * Skips a proportion of the end of the diffusion steps, allowing the init_image to influence the final generated image.  Lower values will result in more influence from the init_image, while higher values will result in more influence from the diffusion steps.
   */
  stepScheduleEnd?: number | undefined;
  /**
   * Skips a proportion of the start of the diffusion steps, allowing the init_image to influence the final generated image.  Lower values will result in more influence from the init_image, while higher values will result in more influence from the diffusion steps.  (e.g. a value of `0` would simply return you the init_image, where a value of `1` would return you a completely different image.)
   */
  stepScheduleStart?: number | undefined;
  /**
   * Number of diffusion steps to run.
   */
  steps?: number | undefined;
  /**
   * Pass in a style preset to guide the image model towards a particular style.
   *
   * @remarks
   * This list of style presets is subject to change.
   */
  stylePreset?: StylePreset | undefined;
};

/** @internal */
export const ImageToImageRequestBody$inboundSchema: z.ZodType<
  ImageToImageRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  init_image: InitImage$inboundSchema,
  text_prompts: z.array(TextPrompt$inboundSchema),
  cfg_scale: z.number().default(7),
  clip_guidance_preset: ClipGuidancePreset$inboundSchema.default("NONE"),
  extras: Extras$inboundSchema.optional(),
  image_strength: z.number().default(0.35),
  init_image_mode: InitImageMode$inboundSchema.default("IMAGE_STRENGTH"),
  sampler: Sampler$inboundSchema.optional(),
  samples: z.number().int().default(1),
  seed: z.number().int().default(0),
  step_schedule_end: z.number().optional(),
  step_schedule_start: z.number().default(0.65),
  steps: z.number().int().default(30),
  style_preset: StylePreset$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "init_image": "initImage",
    "text_prompts": "textPrompts",
    "cfg_scale": "cfgScale",
    "clip_guidance_preset": "clipGuidancePreset",
    "image_strength": "imageStrength",
    "init_image_mode": "initImageMode",
    "step_schedule_end": "stepScheduleEnd",
    "step_schedule_start": "stepScheduleStart",
    "style_preset": "stylePreset",
  });
});

/** @internal */
export type ImageToImageRequestBody$Outbound = {
  init_image: InitImage$Outbound | Blob;
  text_prompts: Array<TextPrompt$Outbound>;
  cfg_scale: number;
  clip_guidance_preset: string;
  extras?: Extras$Outbound | undefined;
  image_strength: number;
  init_image_mode: string;
  sampler?: string | undefined;
  samples: number;
  seed: number;
  step_schedule_end?: number | undefined;
  step_schedule_start: number;
  steps: number;
  style_preset?: string | undefined;
};

/** @internal */
export const ImageToImageRequestBody$outboundSchema: z.ZodType<
  ImageToImageRequestBody$Outbound,
  z.ZodTypeDef,
  ImageToImageRequestBody
> = z.object({
  initImage: InitImage$outboundSchema.or(blobLikeSchema),
  textPrompts: z.array(TextPrompt$outboundSchema),
  cfgScale: z.number().default(7),
  clipGuidancePreset: ClipGuidancePreset$outboundSchema.default("NONE"),
  extras: Extras$outboundSchema.optional(),
  imageStrength: z.number().default(0.35),
  initImageMode: InitImageMode$outboundSchema.default("IMAGE_STRENGTH"),
  sampler: Sampler$outboundSchema.optional(),
  samples: z.number().int().default(1),
  seed: z.number().int().default(0),
  stepScheduleEnd: z.number().optional(),
  stepScheduleStart: z.number().default(0.65),
  steps: z.number().int().default(30),
  stylePreset: StylePreset$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    initImage: "init_image",
    textPrompts: "text_prompts",
    cfgScale: "cfg_scale",
    clipGuidancePreset: "clip_guidance_preset",
    imageStrength: "image_strength",
    initImageMode: "init_image_mode",
    stepScheduleEnd: "step_schedule_end",
    stepScheduleStart: "step_schedule_start",
    stylePreset: "style_preset",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImageToImageRequestBody$ {
  /** @deprecated use `ImageToImageRequestBody$inboundSchema` instead. */
  export const inboundSchema = ImageToImageRequestBody$inboundSchema;
  /** @deprecated use `ImageToImageRequestBody$outboundSchema` instead. */
  export const outboundSchema = ImageToImageRequestBody$outboundSchema;
  /** @deprecated use `ImageToImageRequestBody$Outbound` instead. */
  export type Outbound = ImageToImageRequestBody$Outbound;
}

export function imageToImageRequestBodyToJSON(
  imageToImageRequestBody: ImageToImageRequestBody,
): string {
  return JSON.stringify(
    ImageToImageRequestBody$outboundSchema.parse(imageToImageRequestBody),
  );
}

export function imageToImageRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<ImageToImageRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ImageToImageRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ImageToImageRequestBody' from JSON`,
  );
}
