/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  OrganizationMembership,
  OrganizationMembership$inboundSchema,
  OrganizationMembership$Outbound,
  OrganizationMembership$outboundSchema,
} from "./organizationmembership.js";

export type AccountResponseBody = {
  /**
   * The user's email
   */
  email: string;
  /**
   * The user's ID
   */
  id: string;
  /**
   * The user's organizations
   */
  organizations: Array<OrganizationMembership>;
  /**
   * The user's profile picture
   */
  profilePicture?: string | undefined;
};

/** @internal */
export const AccountResponseBody$inboundSchema: z.ZodType<
  AccountResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string(),
  id: z.string(),
  organizations: z.array(OrganizationMembership$inboundSchema),
  profile_picture: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "profile_picture": "profilePicture",
  });
});

/** @internal */
export type AccountResponseBody$Outbound = {
  email: string;
  id: string;
  organizations: Array<OrganizationMembership$Outbound>;
  profile_picture?: string | undefined;
};

/** @internal */
export const AccountResponseBody$outboundSchema: z.ZodType<
  AccountResponseBody$Outbound,
  z.ZodTypeDef,
  AccountResponseBody
> = z.object({
  email: z.string(),
  id: z.string(),
  organizations: z.array(OrganizationMembership$outboundSchema),
  profilePicture: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    profilePicture: "profile_picture",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountResponseBody$ {
  /** @deprecated use `AccountResponseBody$inboundSchema` instead. */
  export const inboundSchema = AccountResponseBody$inboundSchema;
  /** @deprecated use `AccountResponseBody$outboundSchema` instead. */
  export const outboundSchema = AccountResponseBody$outboundSchema;
  /** @deprecated use `AccountResponseBody$Outbound` instead. */
  export type Outbound = AccountResponseBody$Outbound;
}

export function accountResponseBodyToJSON(
  accountResponseBody: AccountResponseBody,
): string {
  return JSON.stringify(
    AccountResponseBody$outboundSchema.parse(accountResponseBody),
  );
}

export function accountResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<AccountResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountResponseBody' from JSON`,
  );
}
