"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenerateFromImageWithTextAndMaskAcceptEnum = void 0;
exports.version1ImageGenerateFromImageWithTextAndMask = version1ImageGenerateFromImageWithTextAndMask;
const encodings_js_1 = require("../lib/encodings.js");
const files_js_1 = require("../lib/files.js");
const M = __importStar(require("../lib/matchers.js"));
const primitives_js_1 = require("../lib/primitives.js");
const schemas_js_1 = require("../lib/schemas.js");
const security_js_1 = require("../lib/security.js");
const url_js_1 = require("../lib/url.js");
const errors = __importStar(require("../models/errors/index.js"));
const operations = __importStar(require("../models/operations/index.js"));
const async_js_1 = require("../types/async.js");
const blobs_js_1 = require("../types/blobs.js");
const streams_js_1 = require("../types/streams.js");
var GenerateFromImageWithTextAndMaskAcceptEnum;
(function (GenerateFromImageWithTextAndMaskAcceptEnum) {
    GenerateFromImageWithTextAndMaskAcceptEnum["applicationJson"] = "application/json";
    GenerateFromImageWithTextAndMaskAcceptEnum["imagePng"] = "image/png";
})(GenerateFromImageWithTextAndMaskAcceptEnum || (exports.GenerateFromImageWithTextAndMaskAcceptEnum = GenerateFromImageWithTextAndMaskAcceptEnum = {}));
/**
 * Image-to-image with a mask
 *
 * @remarks
 * Selectively modify portions of an image using a mask. The `mask` must be the same shape and size as the init image. This endpoint also supports `image` parameters with alpha channels.  See below for more details.
 *
 * > NOTE: Only **Version 1** engines will work with this endpoint.
 */
function version1ImageGenerateFromImageWithTextAndMask(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.GenerateFromImageWithTextAndMaskRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [parsed, { status: "invalid" }];
    }
    const payload = parsed.value;
    const body = new FormData();
    if ((0, blobs_js_1.isBlobLike)(payload.MaskingRequestBody.init_image)) {
        (0, encodings_js_1.appendForm)(body, "init_image", payload.MaskingRequestBody.init_image);
    }
    else if ((0, streams_js_1.isReadableStream)(payload.MaskingRequestBody.init_image.content)) {
        const buffer = await (0, files_js_1.readableStreamToArrayBuffer)(payload.MaskingRequestBody.init_image.content);
        const blob = new Blob([buffer], { type: "application/octet-stream" });
        (0, encodings_js_1.appendForm)(body, "init_image", blob);
    }
    else {
        (0, encodings_js_1.appendForm)(body, "init_image", new Blob([payload.MaskingRequestBody.init_image.content], {
            type: "application/octet-stream",
        }), payload.MaskingRequestBody.init_image.fileName);
    }
    (0, encodings_js_1.appendForm)(body, "mask_source", payload.MaskingRequestBody.mask_source);
    (0, encodings_js_1.appendForm)(body, "text_prompts", (0, encodings_js_1.encodeJSON)("text_prompts", payload.MaskingRequestBody.text_prompts, {
        explode: true,
    }));
    if (payload.MaskingRequestBody.cfg_scale !== undefined) {
        (0, encodings_js_1.appendForm)(body, "cfg_scale", payload.MaskingRequestBody.cfg_scale);
    }
    if (payload.MaskingRequestBody.clip_guidance_preset !== undefined) {
        (0, encodings_js_1.appendForm)(body, "clip_guidance_preset", payload.MaskingRequestBody.clip_guidance_preset);
    }
    if (payload.MaskingRequestBody.extras !== undefined) {
        (0, encodings_js_1.appendForm)(body, "extras", (0, encodings_js_1.encodeJSON)("extras", payload.MaskingRequestBody.extras, {
            explode: true,
        }));
    }
    if (payload.MaskingRequestBody.mask_image !== undefined) {
        if ((0, blobs_js_1.isBlobLike)(payload.MaskingRequestBody.mask_image)) {
            (0, encodings_js_1.appendForm)(body, "mask_image", payload.MaskingRequestBody.mask_image);
        }
        else if ((0, streams_js_1.isReadableStream)(payload.MaskingRequestBody.mask_image.content)) {
            const buffer = await (0, files_js_1.readableStreamToArrayBuffer)(payload.MaskingRequestBody.mask_image.content);
            const blob = new Blob([buffer], { type: "application/octet-stream" });
            (0, encodings_js_1.appendForm)(body, "mask_image", blob);
        }
        else {
            (0, encodings_js_1.appendForm)(body, "mask_image", new Blob([payload.MaskingRequestBody.mask_image.content], {
                type: "application/octet-stream",
            }), payload.MaskingRequestBody.mask_image.fileName);
        }
    }
    if (payload.MaskingRequestBody.sampler !== undefined) {
        (0, encodings_js_1.appendForm)(body, "sampler", payload.MaskingRequestBody.sampler);
    }
    if (payload.MaskingRequestBody.samples !== undefined) {
        (0, encodings_js_1.appendForm)(body, "samples", payload.MaskingRequestBody.samples);
    }
    if (payload.MaskingRequestBody.seed !== undefined) {
        (0, encodings_js_1.appendForm)(body, "seed", payload.MaskingRequestBody.seed);
    }
    if (payload.MaskingRequestBody.steps !== undefined) {
        (0, encodings_js_1.appendForm)(body, "steps", payload.MaskingRequestBody.steps);
    }
    if (payload.MaskingRequestBody.style_preset !== undefined) {
        (0, encodings_js_1.appendForm)(body, "style_preset", payload.MaskingRequestBody.style_preset);
    }
    const pathParams = {
        engine_id: (0, encodings_js_1.encodeSimple)("engine_id", payload.engine_id, {
            explode: false,
            charEncoding: "percent",
        }),
    };
    const path = (0, url_js_1.pathToFunc)("/v1/generation/{engine_id}/image-to-image/masking")(pathParams);
    const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: options?.acceptHeaderOverride
            || "application/json;q=1, image/png;q=0",
        "Organization": (0, encodings_js_1.encodeSimple)("Organization", payload.Organization, {
            explode: false,
            charEncoding: "none",
        }),
        "Stability-Client-ID": (0, encodings_js_1.encodeSimple)("Stability-Client-ID", payload["Stability-Client-ID"], { explode: false, charEncoding: "none" }),
        "Stability-Client-Version": (0, encodings_js_1.encodeSimple)("Stability-Client-Version", payload["Stability-Client-Version"], { explode: false, charEncoding: "none" }),
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.stabilityApiKey);
    const securityInput = secConfig == null ? {} : { stabilityApiKey: secConfig };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "generateFromImageWithTextAndMask",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.stabilityApiKey,
        retryConfig: options?.retries
            || client._options.retryConfig
            || { strategy: "none" },
        retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
    }, options);
    if (!requestRes.ok) {
        return [requestRes, { status: "invalid" }];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: ["400", "401", "403", "404", "4XX", "500", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes,
    });
    if (!doResult.ok) {
        return [doResult, { status: "request-error", request: req }];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: { Response: response, Request: req },
    };
    const [result] = await M.match(M.json(200, operations.GenerateFromImageWithTextAndMaskResponse$inboundSchema, { hdrs: true, key: "Result" }), M.stream(200, operations.GenerateFromImageWithTextAndMaskResponse$inboundSchema, { ctype: "image/png", hdrs: true, key: "Result" }), M.jsonErr([400, 401, 403, 404], errors.ErrorT$inboundSchema), M.jsonErr(500, errors.ErrorT$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, { extraFields: responseFields });
    if (!result.ok) {
        return [result, { status: "complete", request: req, response }];
    }
    return [result, { status: "complete", request: req, response }];
}
//# sourceMappingURL=version1ImageGenerateFromImageWithTextAndMask.js.map