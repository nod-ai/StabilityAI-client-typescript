/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { encodeJSON, encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import * as errors from "../models/errors/index.js";
import * as operations from "../models/operations/index.js";
import { APIPromise } from "../types/async.js";
export var GenerateFromTextAcceptEnum;
(function (GenerateFromTextAcceptEnum) {
    GenerateFromTextAcceptEnum["applicationJson"] = "application/json";
    GenerateFromTextAcceptEnum["imagePng"] = "image/png";
})(GenerateFromTextAcceptEnum || (GenerateFromTextAcceptEnum = {}));
/**
 * Text-to-image
 *
 * @remarks
 * Generate an image from a text prompt.
 * ### Using SDXL 1.0
 * Use `stable-diffusion-xl-1024-v1-0` as the `engine_id` of your request and pass in `height` & `width` as one of the following combinations:
 * - 1024x1024 (default)
 * - 1152x896
 * - 896x1152
 * - 1216x832
 * - 1344x768
 * - 768x1344
 * - 1536x640
 * - 640x1536
 *
 * ### SDXL 1.0 Pricing
 * When specifying 30 steps or fewer, generation costs 0.9 credits.
 *
 * When specifying above 30 steps, generation cost is determined using the following formula:
 *
 *  `cost = 0.9 * (steps / 30)`
 *
 * ### Using SD 1.6
 * SD1.6 is a flexible-resolution base model allowing you to generate non-standard aspect ratios. The model is optimized for a resolution of 512 x 512 pixels. To generate 1 megapixel outputs, we recommend using SDXL 1.0, which is available at the same price.
 *
 * Pass in `stable-diffusion-v1-6` as the `engine_id` of your request and ensure the `height` & `width` you pass in adhere to the following restrictions:
 * - No dimension can be less than 320 pixels
 * - No dimension can be greater than 1536 pixels
 * - Height and width must be specified in increments of 64
 * - The default resolution is 512 x 512
 */
export function version1ImageGenerateFromText(client, request, options) {
    return new APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = safeParse(request, (value) => operations.GenerateFromTextRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [parsed, { status: "invalid" }];
    }
    const payload = parsed.value;
    const body = encodeJSON("body", payload.TextToImageRequestBody, {
        explode: true,
    });
    const pathParams = {
        engine_id: encodeSimple("engine_id", payload.engine_id, {
            explode: false,
            charEncoding: "percent",
        }),
    };
    const path = pathToFunc("/v1/generation/{engine_id}/text-to-image")(pathParams);
    const headers = new Headers(compactMap({
        "Content-Type": "application/json",
        Accept: options?.acceptHeaderOverride
            || "application/json;q=1, image/png;q=0",
        "Organization": encodeSimple("Organization", payload.Organization, {
            explode: false,
            charEncoding: "none",
        }),
        "Stability-Client-ID": encodeSimple("Stability-Client-ID", payload["Stability-Client-ID"], { explode: false, charEncoding: "none" }),
        "Stability-Client-Version": encodeSimple("Stability-Client-Version", payload["Stability-Client-Version"], { explode: false, charEncoding: "none" }),
    }));
    const secConfig = await extractSecurity(client._options.stabilityApiKey);
    const securityInput = secConfig == null ? {} : { stabilityApiKey: secConfig };
    const requestSecurity = resolveGlobalSecurity(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "generateFromText",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.stabilityApiKey,
        retryConfig: options?.retries
            || client._options.retryConfig
            || { strategy: "none" },
        retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
    }, options);
    if (!requestRes.ok) {
        return [requestRes, { status: "invalid" }];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: ["400", "401", "403", "404", "4XX", "500", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes,
    });
    if (!doResult.ok) {
        return [doResult, { status: "request-error", request: req }];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: { Response: response, Request: req },
    };
    const [result] = await M.match(M.json(200, operations.GenerateFromTextResponse$inboundSchema, {
        hdrs: true,
        key: "Result",
    }), M.stream(200, operations.GenerateFromTextResponse$inboundSchema, {
        ctype: "image/png",
        hdrs: true,
        key: "Result",
    }), M.jsonErr([400, 401, 403, 404], errors.ErrorT$inboundSchema), M.jsonErr(500, errors.ErrorT$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, { extraFields: responseFields });
    if (!result.ok) {
        return [result, { status: "complete", request: req, response }];
    }
    return [result, { status: "complete", request: req, response }];
}
//# sourceMappingURL=version1ImageGenerateFromText.js.map