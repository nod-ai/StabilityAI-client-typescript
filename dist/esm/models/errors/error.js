/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
/**
 * bad_request: one or more parameters were invalid.
 */
export class ErrorT extends Error {
    constructor(err) {
        const message = "message" in err && typeof err.message === "string"
            ? err.message
            : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;
        this.id = err.id;
        this.name = "ErrorT";
    }
}
/** @internal */
export const ErrorT$inboundSchema = z
    .object({
    id: z.string(),
    name: z.string(),
    message: z.string(),
})
    .transform((v) => {
    return new ErrorT(v);
});
/** @internal */
export const ErrorT$outboundSchema = z.instanceof(ErrorT)
    .transform(v => v.data$)
    .pipe(z.object({
    id: z.string(),
    name: z.string(),
    message: z.string(),
}));
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ErrorT$;
(function (ErrorT$) {
    /** @deprecated use `ErrorT$inboundSchema` instead. */
    ErrorT$.inboundSchema = ErrorT$inboundSchema;
    /** @deprecated use `ErrorT$outboundSchema` instead. */
    ErrorT$.outboundSchema = ErrorT$outboundSchema;
})(ErrorT$ || (ErrorT$ = {}));
//# sourceMappingURL=error.js.map