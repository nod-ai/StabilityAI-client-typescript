/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClipGuidancePreset$inboundSchema, ClipGuidancePreset$outboundSchema, } from "./clipguidancepreset.js";
import { Extras$inboundSchema, Extras$outboundSchema, } from "./extras.js";
import { Sampler$inboundSchema, Sampler$outboundSchema, } from "./sampler.js";
import { StylePreset$inboundSchema, StylePreset$outboundSchema, } from "./stylepreset.js";
import { TextPrompt$inboundSchema, TextPrompt$outboundSchema, } from "./textprompt.js";
/** @internal */
export const TextToImageRequestBody$inboundSchema = z.object({
    height: z.number().int().default(512),
    width: z.number().int().default(512),
    text_prompts: z.array(TextPrompt$inboundSchema),
    cfg_scale: z.number().default(7),
    clip_guidance_preset: ClipGuidancePreset$inboundSchema.default("NONE"),
    sampler: Sampler$inboundSchema.optional(),
    samples: z.number().int().default(1),
    seed: z.number().int().default(0),
    steps: z.number().int().default(30),
    style_preset: StylePreset$inboundSchema.optional(),
    extras: Extras$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "text_prompts": "textPrompts",
        "cfg_scale": "cfgScale",
        "clip_guidance_preset": "clipGuidancePreset",
        "style_preset": "stylePreset",
    });
});
/** @internal */
export const TextToImageRequestBody$outboundSchema = z.object({
    height: z.number().int().default(512),
    width: z.number().int().default(512),
    textPrompts: z.array(TextPrompt$outboundSchema),
    cfgScale: z.number().default(7),
    clipGuidancePreset: ClipGuidancePreset$outboundSchema.default("NONE"),
    sampler: Sampler$outboundSchema.optional(),
    samples: z.number().int().default(1),
    seed: z.number().int().default(0),
    steps: z.number().int().default(30),
    stylePreset: StylePreset$outboundSchema.optional(),
    extras: Extras$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        textPrompts: "text_prompts",
        cfgScale: "cfg_scale",
        clipGuidancePreset: "clip_guidance_preset",
        stylePreset: "style_preset",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TextToImageRequestBody$;
(function (TextToImageRequestBody$) {
    /** @deprecated use `TextToImageRequestBody$inboundSchema` instead. */
    TextToImageRequestBody$.inboundSchema = TextToImageRequestBody$inboundSchema;
    /** @deprecated use `TextToImageRequestBody$outboundSchema` instead. */
    TextToImageRequestBody$.outboundSchema = TextToImageRequestBody$outboundSchema;
})(TextToImageRequestBody$ || (TextToImageRequestBody$ = {}));
export function textToImageRequestBodyToJSON(textToImageRequestBody) {
    return JSON.stringify(TextToImageRequestBody$outboundSchema.parse(textToImageRequestBody));
}
export function textToImageRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TextToImageRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TextToImageRequestBody' from JSON`);
}
//# sourceMappingURL=texttoimagerequestbody.js.map