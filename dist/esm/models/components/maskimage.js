/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const MaskImage$inboundSchema = z.object({
    fileName: z.string(),
    content: z.union([
        z.instanceof((ReadableStream)),
        z.instanceof(Blob),
        z.instanceof(ArrayBuffer),
        z.instanceof(Uint8Array),
    ]),
});
/** @internal */
export const MaskImage$outboundSchema = z.object({
    fileName: z.string(),
    content: z.union([
        z.instanceof((ReadableStream)),
        z.instanceof(Blob),
        z.instanceof(ArrayBuffer),
        z.instanceof(Uint8Array),
    ]),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MaskImage$;
(function (MaskImage$) {
    /** @deprecated use `MaskImage$inboundSchema` instead. */
    MaskImage$.inboundSchema = MaskImage$inboundSchema;
    /** @deprecated use `MaskImage$outboundSchema` instead. */
    MaskImage$.outboundSchema = MaskImage$outboundSchema;
})(MaskImage$ || (MaskImage$ = {}));
export function maskImageToJSON(maskImage) {
    return JSON.stringify(MaskImage$outboundSchema.parse(maskImage));
}
export function maskImageFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MaskImage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MaskImage' from JSON`);
}
//# sourceMappingURL=maskimage.js.map