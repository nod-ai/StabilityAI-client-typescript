/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
/**
 * The type of content this engine produces
 */
export const Type = {
    Audio: "AUDIO",
    Classification: "CLASSIFICATION",
    Picture: "PICTURE",
    Storage: "STORAGE",
    Text: "TEXT",
    Video: "VIDEO",
};
/** @internal */
export const Type$inboundSchema = z.nativeEnum(Type);
/** @internal */
export const Type$outboundSchema = Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Type$;
(function (Type$) {
    /** @deprecated use `Type$inboundSchema` instead. */
    Type$.inboundSchema = Type$inboundSchema;
    /** @deprecated use `Type$outboundSchema` instead. */
    Type$.outboundSchema = Type$outboundSchema;
})(Type$ || (Type$ = {}));
/** @internal */
export const Engine$inboundSchema = z
    .object({
    description: z.string(),
    id: z.string(),
    name: z.string(),
    type: Type$inboundSchema,
});
/** @internal */
export const Engine$outboundSchema = z.object({
    description: z.string(),
    id: z.string(),
    name: z.string(),
    type: Type$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Engine$;
(function (Engine$) {
    /** @deprecated use `Engine$inboundSchema` instead. */
    Engine$.inboundSchema = Engine$inboundSchema;
    /** @deprecated use `Engine$outboundSchema` instead. */
    Engine$.outboundSchema = Engine$outboundSchema;
})(Engine$ || (Engine$ = {}));
export function engineToJSON(engine) {
    return JSON.stringify(Engine$outboundSchema.parse(engine));
}
export function engineFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Engine$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Engine' from JSON`);
}
//# sourceMappingURL=engine.js.map