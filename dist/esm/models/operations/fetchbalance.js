/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const FetchBalanceRequest$inboundSchema = z.object({
    Organization: z.string().optional(),
    "Stability-Client-ID": z.string().optional(),
    "Stability-Client-Version": z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "Organization": "organization",
        "Stability-Client-ID": "stabilityClientID",
        "Stability-Client-Version": "stabilityClientVersion",
    });
});
/** @internal */
export const FetchBalanceRequest$outboundSchema = z.object({
    organization: z.string().optional(),
    stabilityClientID: z.string().optional(),
    stabilityClientVersion: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        organization: "Organization",
        stabilityClientID: "Stability-Client-ID",
        stabilityClientVersion: "Stability-Client-Version",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FetchBalanceRequest$;
(function (FetchBalanceRequest$) {
    /** @deprecated use `FetchBalanceRequest$inboundSchema` instead. */
    FetchBalanceRequest$.inboundSchema = FetchBalanceRequest$inboundSchema;
    /** @deprecated use `FetchBalanceRequest$outboundSchema` instead. */
    FetchBalanceRequest$.outboundSchema = FetchBalanceRequest$outboundSchema;
})(FetchBalanceRequest$ || (FetchBalanceRequest$ = {}));
export function fetchBalanceRequestToJSON(fetchBalanceRequest) {
    return JSON.stringify(FetchBalanceRequest$outboundSchema.parse(fetchBalanceRequest));
}
export function fetchBalanceRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FetchBalanceRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FetchBalanceRequest' from JSON`);
}
//# sourceMappingURL=fetchbalance.js.map