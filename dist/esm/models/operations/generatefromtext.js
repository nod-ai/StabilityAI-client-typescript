/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const GenerateFromTextRequest$inboundSchema = z.object({
    engine_id: z.string(),
    Organization: z.string().optional(),
    "Stability-Client-ID": z.string().optional(),
    "Stability-Client-Version": z.string().optional(),
    TextToImageRequestBody: components.TextToImageRequestBody$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "engine_id": "engineId",
        "Organization": "organization",
        "Stability-Client-ID": "stabilityClientID",
        "Stability-Client-Version": "stabilityClientVersion",
        "TextToImageRequestBody": "textToImageRequestBody",
    });
});
/** @internal */
export const GenerateFromTextRequest$outboundSchema = z.object({
    engineId: z.string(),
    organization: z.string().optional(),
    stabilityClientID: z.string().optional(),
    stabilityClientVersion: z.string().optional(),
    textToImageRequestBody: components.TextToImageRequestBody$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        engineId: "engine_id",
        organization: "Organization",
        stabilityClientID: "Stability-Client-ID",
        stabilityClientVersion: "Stability-Client-Version",
        textToImageRequestBody: "TextToImageRequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GenerateFromTextRequest$;
(function (GenerateFromTextRequest$) {
    /** @deprecated use `GenerateFromTextRequest$inboundSchema` instead. */
    GenerateFromTextRequest$.inboundSchema = GenerateFromTextRequest$inboundSchema;
    /** @deprecated use `GenerateFromTextRequest$outboundSchema` instead. */
    GenerateFromTextRequest$.outboundSchema = GenerateFromTextRequest$outboundSchema;
})(GenerateFromTextRequest$ || (GenerateFromTextRequest$ = {}));
export function generateFromTextRequestToJSON(generateFromTextRequest) {
    return JSON.stringify(GenerateFromTextRequest$outboundSchema.parse(generateFromTextRequest));
}
export function generateFromTextRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GenerateFromTextRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GenerateFromTextRequest' from JSON`);
}
/** @internal */
export const GenerateFromTextResponseBody$inboundSchema = z.object({
    artifacts: z.array(components.Image$inboundSchema).optional(),
});
/** @internal */
export const GenerateFromTextResponseBody$outboundSchema = z.object({
    artifacts: z.array(components.Image$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GenerateFromTextResponseBody$;
(function (GenerateFromTextResponseBody$) {
    /** @deprecated use `GenerateFromTextResponseBody$inboundSchema` instead. */
    GenerateFromTextResponseBody$.inboundSchema = GenerateFromTextResponseBody$inboundSchema;
    /** @deprecated use `GenerateFromTextResponseBody$outboundSchema` instead. */
    GenerateFromTextResponseBody$.outboundSchema = GenerateFromTextResponseBody$outboundSchema;
})(GenerateFromTextResponseBody$ || (GenerateFromTextResponseBody$ = {}));
export function generateFromTextResponseBodyToJSON(generateFromTextResponseBody) {
    return JSON.stringify(GenerateFromTextResponseBody$outboundSchema.parse(generateFromTextResponseBody));
}
export function generateFromTextResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GenerateFromTextResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GenerateFromTextResponseBody' from JSON`);
}
/** @internal */
export const GenerateFromTextResponseResult$inboundSchema = z.union([
    z.lazy(() => GenerateFromTextResponseBody$inboundSchema),
    z.instanceof((ReadableStream)),
]);
/** @internal */
export const GenerateFromTextResponseResult$outboundSchema = z.union([
    z.lazy(() => GenerateFromTextResponseBody$outboundSchema),
    z.instanceof((ReadableStream)),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GenerateFromTextResponseResult$;
(function (GenerateFromTextResponseResult$) {
    /** @deprecated use `GenerateFromTextResponseResult$inboundSchema` instead. */
    GenerateFromTextResponseResult$.inboundSchema = GenerateFromTextResponseResult$inboundSchema;
    /** @deprecated use `GenerateFromTextResponseResult$outboundSchema` instead. */
    GenerateFromTextResponseResult$.outboundSchema = GenerateFromTextResponseResult$outboundSchema;
})(GenerateFromTextResponseResult$ || (GenerateFromTextResponseResult$ = {}));
export function generateFromTextResponseResultToJSON(generateFromTextResponseResult) {
    return JSON.stringify(GenerateFromTextResponseResult$outboundSchema.parse(generateFromTextResponseResult));
}
export function generateFromTextResponseResultFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GenerateFromTextResponseResult$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GenerateFromTextResponseResult' from JSON`);
}
/** @internal */
export const GenerateFromTextResponse$inboundSchema = z.object({
    Headers: z.record(z.array(z.string())),
    Result: z.union([
        z.lazy(() => GenerateFromTextResponseBody$inboundSchema),
        z.instanceof((ReadableStream)),
    ]),
}).transform((v) => {
    return remap$(v, {
        "Headers": "headers",
        "Result": "result",
    });
});
/** @internal */
export const GenerateFromTextResponse$outboundSchema = z.object({
    headers: z.record(z.array(z.string())),
    result: z.union([
        z.lazy(() => GenerateFromTextResponseBody$outboundSchema),
        z.instanceof((ReadableStream)),
    ]),
}).transform((v) => {
    return remap$(v, {
        headers: "Headers",
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GenerateFromTextResponse$;
(function (GenerateFromTextResponse$) {
    /** @deprecated use `GenerateFromTextResponse$inboundSchema` instead. */
    GenerateFromTextResponse$.inboundSchema = GenerateFromTextResponse$inboundSchema;
    /** @deprecated use `GenerateFromTextResponse$outboundSchema` instead. */
    GenerateFromTextResponse$.outboundSchema = GenerateFromTextResponse$outboundSchema;
})(GenerateFromTextResponse$ || (GenerateFromTextResponse$ = {}));
export function generateFromTextResponseToJSON(generateFromTextResponse) {
    return JSON.stringify(GenerateFromTextResponse$outboundSchema.parse(generateFromTextResponse));
}
export function generateFromTextResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GenerateFromTextResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GenerateFromTextResponse' from JSON`);
}
//# sourceMappingURL=generatefromtext.js.map